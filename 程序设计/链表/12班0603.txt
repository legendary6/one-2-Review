#include <stdio.h>
#include <stdlib.h>

typedef struct node {
    int data;
    struct node * next;
} Node;

// 打印链表
void printList(Node * head) {
    for(; head; head=head->next)
        printf("%d ", head->data);
    printf("\n");
}

// 统计链表中节点的个数
int sizeList(Node * head) {
    //int i = 0;
    //for(; head; head=head->next)
    //    i++;
    //return i;
    int i;
    for(i=0; head; ++i)
        head=head->next;
    return i;
}

void pushBackList(Node ** pList, int data) {
    Node * newNode = (Node *)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;
    if(*pList) {  // 一般情况
        Node * temp = *pList;
        while(temp->next)
            temp = temp->next;
        temp->next = newNode;
    } else {      // 空链表
        *pList = newNode;
    }
}

void pushFrontList(Node ** pList, int data) {
    Node * newNode = (Node *)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = *pList;
    *pList = newNode;
}


// 释放链表
void freeList(Node ** pList) {
    Node * head = *pList;
    Node * temp;
    while(head != NULL) {
        temp = head;
        head = head->next;
        free(temp);
    }
    *pList = NULL;
}

void deleteList(Node ** pList, int data) {
    Node * head = *pList;
    Node * temp;
    while(head->next != NULL) {
        if(head->next->data != data) {
            head = head->next;
            continue;
        }
        temp = head->next;
        head->next = temp->next;
        free(temp);
    }
    if((*pList)->data == data) {
        temp = *pList;
        *pList = temp->next;
        free(temp);
    }
}


int main(void) {
    // 1、创建一个空链表
    // list：节点指针变量，表示指向链表首节点
    // list指向NULL，表示链表为空链表
    Node * list = NULL;
    pushBackList(&list, 10);
    pushBackList(&list, 12);
    pushBackList(&list, 13);
    pushBackList(&list, 14);
    pushBackList(&list, 15);
    printList(list);
    freeList(&list);
    pushFrontList(&list, 13);
    pushFrontList(&list, 10);
    pushFrontList(&list, 12);
    pushFrontList(&list, 13);
    pushFrontList(&list, 13);
    pushFrontList(&list, 14);
    pushFrontList(&list, 13);
    pushFrontList(&list, 15);
    pushFrontList(&list, 13);
    printList(list);
    deleteList(&list, 13);
    printList(list);
    freeList(&list);
    



    //Node n1, n2, n3, n4, n5;   
    //n1.data = 10;  n2.data = 20; 
    //n3.data = 30;  n4.data = 40;
    //n5.data = 25;
    //n1.next = &n2; n2.next = &n3;
    //n3.next = &n4; n4.next = NULL;
    //n5.next = &n3; n2.next = &n5;

    //printList(&n1);
    //printf("%d\n", sizeList(&n1));

    return 0;
}










//enum sex { boy=1, girl, other };
//
//int main(void) {
//    enum sex zs = boy;  printf("%d\n", zs);
//    zs = girl;          printf("%d\n", zs);
//    zs = other;         printf("%d\n", zs);
//    zs = (enum sex)1;
//
//    return 0;
//}

